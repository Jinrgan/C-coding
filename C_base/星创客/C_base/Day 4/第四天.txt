一、复习
	数组和指针
	
1、指针的使用步骤
	定义指针变量
	分配空间
	
	判断是否为空，不为空，则使用
	使用完毕，判断是否为空，不为空，则释放，置空	
	
2、指针和数组
	int * p = arr = &arr[0];
	p指针变量  arr指针常量
	p[0]  ===   arr[0];
	*p    ===   *arr ;
	p[1]  ===   arr[1];
	*(p + 1) === arr[1];
	char chArr[3];
	char (*pchArr)[3] = &chArr;
	
	int arrMN[3][4];
	3个一维数组构成
	arrMN[0]  arrMN[1]  arrMN[2]
	int *p = &arrMN[1][0] = arrMN[1];
	int (*q)[4] = &arrMN[0];   q = &arrMN[0];	
	q+1 ==== &arrMN[1];
	*(q + 1) = *(&arrMN[1]);
	*(q + 1) ==== arrMN[1];
	q[1]  === arrMN[1];
	q[1][3] === arrMN[1][3]
			
	*(p + j) == * (p + 2) == p[2] == arr[2];
	
	
	arr[2][i]  ===  *(arr[2] + i)
	*(q + i) -- q[i] --- arr[2][i]
	-------------------------------------------------------------
	int brr[4];  brr = &brr[0];
	brr[j] === *(brr + j)	
	
	int intArr[4][5];
	有4个行数组  intArr  四个行数组的首地址  
	intArr[i] 第i行的名字 --》 intArr[i]是该行首地址 intArr[i] = &intArr[i][0];
	输出i*j值   行名[j] = *(行名 + j) 
	intArr[i][j] = *(intArr[i] + j);	
	
	整行的地址 + i --->跳到第i行 ==》 &brr  &intArr[j]
	某行的首元素地址 + i --> 跳到该行的第i个元素 brr+i  intArr[j]+i
	
	------------------------------------------------------------------
	int * search(int (*p) [4], int j)
	{
		int *q;
		q = *(p + j);
		/*
			分析：
			p指向某一行，相当于二维数组中的&arr[i]
			p + j 指向p的下面第j行，相当于二维数组中&arr[i + j]
			*(p + j) === p[j]  === arr[i + j]; arr[i + j] 相当于二维数组中&arr[i+j][0]
		*/
		return q;
	}
	
	.......
	int intArr[3][4];
	search(intArr, 2);
	---------------------------------------------------------
	一维数组int arr[5]，数组名是数组首元素的地址
		int * p = &arr[0] = arr;//p指向一个元素
	int (*q)[5];q是一个行指针，指向一行。
	int  crr[2][5];
	crr[i]是第i行的名字, crr[i] = &crr[i][0]
		q = &crr[i];
		
	&crr[0]的类型与q匹配，可以相互赋值
	crr相当于crr[0],crr[1]这个数组的数组名
	---------------------------------------------------------
3、作业题
	
二、今天的内容
	函数和动态申请空间
1、函数
	函数的声明
		返回值类型  函数名(形式参数列表);
	函数的定义 
		返回值类型  函数名(形式参数列表){函数体}
	函数的调用
		变量 = 函数名(实际参数列表);

	函数的调用之前，必须能看到函数的声明/函数定义
	函数的声明---放在头文件.h里
	#include <头文件>
	
	#include <路径/头文件>
	gcc -I路径  源文件  -o 目标文件
2、函数在调用时，分配空间，调用结束，空间收回
	//栈
	
3、函数局部变量的地址不能返回//栈

4、返回地址
	被调函数返回的地址必须是主调函数可以操作控制的地址
	//栈：主调函数的栈
	//堆：malloc
	//数据段：char * p = "hello world"; return p;

5、函数和数组
	1）数组作为返回值
		数组不能整体作为返回值
	
	2）数组作为函数的参数
		当数组名作为函数参数时，退化为指针，需要再传一个参数指明数组的元素个数
		当数组元素作为函数参数，和普通一样使用。
		
6、函数和指针
	1）指针作为函数的返回值
		被调函数返回的地址必须是主调函数可以操作控制的地址
		//栈：主调函数的栈
		//堆：malloc
		//数据段：char * p = "hello world"; return p;
	2）指针作为函数的参数
		当指针指向的空间的内容在函数内部不能改时，需要在*前面加const 
		
	3）指针指向函数
		函数类型: 返回值类型  (形式参数列表)
		返回值类型 (*pFunc)(形式参数列表);
		pFunc = &函数名 = 函数名;
		printf("hello");
		函数调用 pFunc("farsight");
7、动态申请
	malloc, realloc, calloc, free 
	#include <stdlib.h>
	void *malloc(size_t size);
		申请size个字节的堆空间，不初始化
    void free(void *ptr);
		释放
    void *calloc(size_t nmemb, size_t size);
		申请nmemb * size个字节的大小，并且初始化
    void *realloc(void *ptr, size_t size);
		当ptr==NULL, 相当于malloc(size)
		当size=0 && ptr != NULL时，相当于free(ptr);
		当ptr!=NULL时，要求ptr必须是malloc/calloc/realloc的返回值
		申请size个字节的堆空间，复制ptr所指空间的内容到新的内存中，
			（一定不能越界）剩余空间不初始化。
			可以实现扩大或者缩小被申请的内存

	#include <string.h>
	void * memset(void * s, int c, int n);
		给s指定的内存放n个bytes的c

API  接口  函数  团队精神
练习题：
	1. 查找源字符串中是否有给定的字符
	2. 查找源字符串中是否有给定的字符串 
	3. 比较两个字符串指定长度的大小
	4. 将一个字符串中指定的长度的字符拷贝到另一个地址中
	5. 编写一函数统计特定字符在字符串中出现的次数
	6. 求字符串的长度
练习题：

showArr(int * p, int len);
showArr(int arr[], int len);
showArr(int arr[4], int len);

int * search(int (*p)[4], int j)
{
	p = *(p + j) == p[j];
	return p;
}

int main()
{
	int arr[3][4] = {{1,2,3}, {2, 3, 4}, {3, 4, 5, 6}};
	int * q = search(arr, 2);
	for (int i = 0; i < 4; i++)
	{
		printf("%d\r\n", *(q + i));
	}
}



