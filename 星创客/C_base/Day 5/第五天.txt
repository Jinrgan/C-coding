第五天
一、复习
	函数
	声明、定义、调用
	strchr, strstr, strcpy, strcmp, strlen,
	strrchr,        strncpy, strncmp,
	memcpy, memset, strcat,  
	
	指针和函数
		返回值：被调函数的局部变量的地址不能返回。
		参数：const char *, const int *
		指针指向函数
			函数类型-》返回值类型 函数参数列表
			int (*pFunc)();
int getData();
int * func(int a);
第一种 
typedef int FUNC();
	FUNC * pFunc;
	pFunc = getData;
	pFunc();//函数调用 
-----------------------第一种方法最常用-----------
第二种 	
typedef int *pFUNC(int);
	pFUNC * qFunc;
	qFunc = func;
	qFunc(3);
第三种 
typedef int *(*pFUNC2)(int);
	pFUNC2 pFunc2 = func;
	pFunc2(4);

int *, char *, float *, void *
void * p;这个定义合法，并且常用。
	但，一般，p所指空间存放的是数据
	在使用void *指针变量前，需要强制转换成特定的类型
	例：malloc/calloc/realloc/free
	
二、今天的内容
	多文件
1. 头文件
#ifndef XXX
#define XXX
	常量的定义
		#define
		enum
	类型定义 
		struct
		union
		typedef
	全局变量声明
	函数的声明
#endif

说明 ：
	#ifndef用来防止头文件被重复包含
例：
	#define MAX 3 
	#undef  MAX
	
2. static
	局部变量
		存储在数据段
		生存周期：从main开始到main结束
		访问范围：只在被定义的函数内部被访问
		如果不显示的初始化，默认值为0
		初始化只能被执行一次，以后每次使用都是使用上一次保存下来的值。
	全局变量 
		存储在数据段
		生存周期：从main开始到main结束
		访问范围：只在被定义的文件内部被访问
		如果不显示的初始化，默认值为0
	函数 
		访问范围：只在被定义的文件内部被访问
		
3. extern
	全局变量的声明前加extern,全局在使用之前必须有定义 
	函数的声明也可以使用extern来修饰。
4. 宏打印
	__FUNCTION__ //函数名
	__func__ //函数名
	__FILE__ //文件名
	__LINE__ //行号
	
	#define API()  printf("file:%s, func:%s, line:%d\r\n",  \
		__FILE__,__FUNCTION__,__LINE__);
		
	出错时，建议使用perror("？？？");
5. 练习题
1、以下程序有什么问题？
char *GetMemory(void)
{	
	char p[] = “hello world”;
	return p;///&p[0]
}
void Test(void)
{
	char *str = NULL;
	str  = GetMemory();
	printf(“%s”,str);
}
答:____________________________________
2、下面代码输出结果是多少？
int a=12; int*p,*q，*r;
p=&a;
r=p+1;
q=p++;
printf(“%2d%2d\n”,q-p,r-p);
printf(“%5d\n”,(char*)p-(char*)q);
答：_________________________ 

3、找错题
   void test2()
   {
　    char string[10], str1[10];
　    int i;
　    for(i=0; i<10; i++)
　    {
			str1 = 'a';
　    }
      strcpy( string, str1 );
	  string[9] = '\0';
   }

4、程序分析，写出以下程序存在什么问题，若没有问题，请写出结果
第一题：void main(void)
{
	 char *p = NULL;
     p = (char *)malloc(100);.....
     free(p);
   
     if(NULL != p)
 	 {
		strcpy(p, “hello”);
	 }
	 printf(p);
}
答：______________________________________
第二题：
void main(void)
{
	char   a ;
    char  *str = &a;
    strcpy(str, “hello”);
    printf(str);
}
答：___________________________________________

5、下面程序的输出是_____，为什么？
char *ptr;
if ((ptr = (char *)malloc(0)) == NULL)
{
	puts("Got a null pointer");
}
else
{
	puts("Got a valid pointer");
}

6、请找出下面代码中的所有错误,并提出改进方案
说明：以下代码是把一个字符串倒序，如“abcd”倒序后变为“dcba”
#include"string.h"
int main()
{
	char*src="hello,world";
	char* dest=NULL;
	int len=strlen(src);
	dest=(char*)malloc(len);
	char* d=dest;
	char* s=src[len];
	while(len--!=0)
	{
		d++=s--;
	}
	printf("%s",dest);
	return 0;
}

7、练习题
(1).找出字符或字符串最后一次出现的位置;strrchr
(2).编写一个函数完成指定长度的内存的拷贝;memcpy
(3).自定义函数实现memset的功能 
(4).将给定的两个字符串连接起来strcat 
(5).只要一个字符串中任意字符在字符串中出现,就将它出现的位置返回，如：
char  *pc=”account”;
char *pr=”ocn”; pr字符c在字符串pc中出现的最早，将它出现的位置返回; 

char *strchr(const char *s, int c)
{
	if (NULL == s)
		return NULL;
	while(*s && *s != (char)c)
	{
		s++;
	}
	return *s == '\0' ? NULL : s;
}
char * strrchr(const char * s, int c)
{
	if (NULL == s)
		return NULL;
	const char * p = NULL;
	---------------------------------
	const char * q = NULL;
	while(1)
	{
		q = strchr(s, c);
		if (NULL != q)
		{
			p = q;
			s = q + 1;
		}
		else 
			break;
	}
	
	-------------------
	int len = strlen(s);
	for (i = len - 1; i >= 0; i--)
	{
		if (s[i] == c)
		{
			p = s + i;
			break;
		}
	}
	return p;
}
char * strncpy(char * dest, const char * src, int size);
void * memcpy(void * dest, const void * src, int size)
{
	if (NULL == dest || NULL == src)
		return NULL;
	char * pDest = (char *)dest;
	char * pSrc = (char *)src;
	
	while (size > 0)
	{
		*pDest++ = *pSrc++;
		size--;
	}
	return dest;
}	

void * memset(void * dest, int c, int size)
{
	if (NULL == dest)
		return NULL;
	char * pDest = (char *)dest;
	
	while (size > 0)
	{
		*pDest++ = (char)c;
		size--;
	}
	return dest;
}	
//字符串连接
//歌手:歌名

char *strcat(char * dest, const char * src)
{
	if (NULL == dest || NULL == src)
	{
		return NULL;
	}
	char * p = dest;
	while(*p)
	{
		p++;
	}
	while(*src)
	{
		*p++ = *src++;
	}
	return dest;
}

int main()
{
	char str1[10] = {"hello "};
	char str2[] = "farsight";
	//拼接
	//strcat(str1, str2); strcpy(str1 + strlen(str1), str2);
	int remainLength = sizeof(str1) / sizeof(str1[0]) - strlen(str1) ;
	int len = remainLength > strlen(str2) ? strlen(str2) : remainLength;
	strncpy(str1 + strlen(str1), str2, len);
	str1[9] = 0;
	printf("str1=%s\r\n" , str1);
	return 0;
}


题目：填空练习（指向指针的指针）
1.程序分析：　　　　　
2.程序源代码：
int main()
{ 
	char *s[]={"man","woman","girl","boy","sister"};
	char **q;
	int k;
	for(k=0;k<5;k++)
	{　　　　　　　
		q = &s[k];/*这里填写什么语句*/
		q = s + k;
	　  printf("%s\n",*q);
	}
}













